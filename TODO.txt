gfortran does not allow a bind(c) procedure to have a non-bind(c) derived type
argument.  To wrap a procedure with a derived-type that is non-bind(c) requires
a copy-in/copy-out.  If the type is bind(c) then no copy is necessary.

This is probably good for safety, and ensures alignment & padding issues won't
bite us later.  Since compilers can do crazy things in optimizations of structs
(reordering?  padding?), this could be the source of nasty bugs.

If the end user wants fast derived-type interoperability, he'll have to declare
derived-types with bind(c).

---

gfortran does not allow this in a bind(c) procedure:

    integer, parameter :: fwrap_default_logical=c_int
    logical(fwrap_default_logical), intent(in) :: l

Rather, gfortran requires:

    integer, parameter :: fwrap_default_logical=kind(.true.)
    logical(fwrap_default_logical), intent(in) :: l

which will yield a warning.

This will not yield a warning, but will require copying:

    integer, parameter :: fwrap_default_logical=c_bool
    logical(fwrap_default_logical), intent(in) :: l

Perhaps have a `strict' mode with the understanding that there will be a
performance hit.

---

Name collisions when mangling --
    When mangling 'empty_func' to 'empty_func_c', need to ensure there aren't
    any pre-existent 'empty_func_c's lying around.

    However, Fortran will mangle procedure names itself (trailing underscores,
    etc.).  As long as our name-mangling convention doesn't overlap a Fortran
    compiler's name-mangling, we'll be okay.

---

when array extents are passed explicitly like this:

subroutine s(arr, d)
    integer, dimension(d) :: arr
    integer :: d
    ...
end subroutine s

And the user specifies (somehow?) that `d' is to be hidden in the C prototype,
the wrapped subroutine should look something like:

subroutine s_c(arr_d1, arr) bind(c, 's_c')
    integer(fwrap_default_int), intent(in) :: arr_d1
    integer(fwrap_default_int), dimension(arr_d1) :: arr
    interface
        ...
    end interface
    call s(arr, arr_d1)
end subroutine s_c

Perhaps the argument specification can take another parameter,
'optional=<expr>' where expr is something like 'shape(arr, 1)'.

---

Name collisions:

    Test temporary variables.
    Test array extents.
    Test for any name that's injected in the procedure's namespace.

---

A procedure-local parameter that is used as a ktp or in an array extent
expression:

...
    integer, parameter :: FOO=kind(1.0)+1, DIM=12-3
    real(FOO), dimension(DIM), intent(inout) :: arg
...

The config module will have a section that looks like:

...
    integer, parameter :: <prefix>_FOO = <whatever is generated from compilation phase>
    integer, parameter :: <prefix>_DIM = 12-3
...

The interface will look like:

...
    use config !!! only clause here?
    real(<prefix>_FOO), dimension(<prefix>_DIM), intent(inout) :: arg
...

The wrapper will have:

    use config
    integer(<prefix>_default_int), intent(in) :: arg_d1
    real(<prefix>_FOO), dimension(arg_d1), intent(inout) :: arg

Further down the wrapper (can, optionally?, or should?) generate a dimension check:

    assert arg_d1 .eq. <prefix>_DIM

If this is false, an error code needs to be returned.

    (How do we do that?  It'll change the procedure's signature and adds an error argument...)

---

Config module generation:

One problem is that we'll have one big namespace for all parameters -- possible collisions.

Solution (1) a separate config module per external subprogram; can put all of these in one file.
    -- possible speed hit; more complicated...

Solution (2) one module with procedure-specific name mangling.
    -- if use procedure name to mangle, very long parameter names.

---


intent('hide') arguments, ala f2py:

Argument('arg', intent='hide', value='shape(a, 0)')

value is a fortran expression that will be assigned to the argument and used in the call.

NB: this changes the intent of the argument!  We're assigning to it so it has
to be declared as intent('inout') or something.

DONE 3.9.2010

---

Hide argument can only be a scalar -- no dimension allowed.

---

'check' attribute (ala f2py):

For complicated array extents, we need to allow runtime checking.  E.g:

function f(iarr, ck, nk)
    integer, intent(in) :: ck, nk
    integer, dimension((ck-nk+1)*(ck-nk+1)) :: iarr
    !...
end function f

Declared with:

Argument('iarr', default_int, dimension=['(ck-nk+1)*(ck-nk+1)'])
Argument('ck', default_int, check='shape(iarr, 1) == (ck-nk+1)*(ck-nk+1)')
(can have an 'assertion' argument to procedures, eqiv. to checks?)

Generates the code:

function f_c(iarr_d1, iarr, ck, nk, fw_err) bind(...)
    use config
    implicit none
    integer, intent(in) :: iarr_d1
    integer, dimension(iarr_d1) :: iarr
    integer, intent(in) :: ck
    integer, intent(in) :: nk
    integer, intent(out) :: fw_err (or appropriate name...)
    integer :: f_c
    fw_err = 0
    if ( .not. (shape(iarr, 1) == (ck-nk+1)*(ck-nk+1))) then
        fw_err = 1
        return
    endif


---

Parameters (defined in the procedure) & literal constants.
    This is a biggie...

---

Use statements & symbol resolution.
    After procedure parameters & constants.

---

Derived types
    Later version

---

Config module / header generation.

---
